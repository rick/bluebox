#!/usr/bin/perl -w

# Rick Bradley (rick@rickbradley.com)
#
# This software is made available under the terms of my version of the BSD
# license, online at <http://www.rickbradley.com/misc/bsd-license.html>
#

#
# source file needs to be sorted with:
#
#   sort -f -b -d -u source > sorted  
#
# extract line count with wc -l for --line_count
#

use strict;
use FileHandle;
use Getopt::Long;
use vars qw($source $ref $rand $line $word $OPT $DEBUG $done);

# retrieve command-line arguments
$OPT = process_cmdline();
$DEBUG = $OPT->{'debug'};

# get a handle for this file
$ref = make_handle($OPT->{'source'}, $OPT->{'line_count'}, $OPT->{'line_length'});

if ('' ne $OPT->{'topic'}) {
    # choose a first line like that provided
    $line = get_word_line($ref, $OPT->{'topic'}, word_count($OPT->{'topic'}));
} else {
    # choose a random first line
    $rand = int(rand($OPT->{'line_count'}));
    $line = fetch_line($ref, $rand);
}

# prologue
if ($OPT->{'web'}) {
    print "http://www.rickbradley.com/ ".$OPT->{'topic'}."\n";
    print "<pre>\n";
}

# write a poem
$done = 0;
while (! $done) {
    # display line
    ($done, $line) = display_line($OPT, $line);

    # find link word(s)
    $word = last_word($line, $OPT->{'link'});
    print "                                            word [$word]\n" if $DEBUG;

    # get next line
    $line = get_word_line($ref, $word, $OPT->{'link'});
}

# epilogue
if ($OPT->{'web'}) {
    print "</pre>\n";
}

# cleanup
close_handle($ref);



######################################################################
#
#  SUBROUTINES
#
######################################################################


# display a line of a poem
sub display_line {
    my $opt = shift;
    my $line = shift;
    my $finish = shift || 0;
    my ($stanza, $lines);

    # grab counters
    $stanza = $opt->{'stanzacount'} || 0;
    $lines = $opt->{'linecount'} || 0;

    # post-process line
    $line = lc($line) if $opt->{'lower'};
    $line = strip_punct($line) if not $opt->{'punct'};
    $line = add_dashes($line) if $opt->{'dashes'};

    if ($opt->{'width'}) {
	# update buffer
	$line =~ s/^\s+//;
	$opt->{'buffer'} = '' unless exists $opt->{'buffer'};
	$opt->{'buffer'} .= ' ' unless '' eq $opt->{'buffer'};
	$opt->{'buffer'} .= $line; 

	# time already printed linked words
	$opt->{'buffer'} = strip_first_word($opt->{'buffer'}, $opt->{'link'}) 
	    if ($opt->{'flush'} and $opt->{'link'} and $opt->{'doflush'});

	# print buffer lines until underflow
	while (word_count($opt->{'buffer'}) > $opt->{'width'}) {
	    $line = get_first_word($opt->{'buffer'}, $opt->{'width'});
	    print "$line".$opt->{'break'};
	    return (1, '') if (++$lines > $opt->{'lines'});

	    # do stanza breaks
	    print $opt->{'break'} if $opt->{'stanza'} and (!(++$stanza % $opt->{'stanza'}));

	    $opt->{'buffer'} = strip_first_word($opt->{'buffer'}, $opt->{'width'});
	}

	# time to clear out the last of the buffer?
	if ($finish) {
	    $line = $opt->{'buffer'};
	    print "$line".$opt->{'break'};
	}

	# flush the buffer
	$opt->{'buffer'} = '';
    } else {
	# time already printed linked words
	$line = strip_first_word($line, $opt->{'link'}) 
	    if ($opt->{'flush'} and $opt->{'link'} and $opt->{'doflush'});

	print "$line".$opt->{'break'};
	return (1, '') if (++$lines > $opt->{'lines'});

	# do stanza breaks
	print $opt->{'break'} if $opt->{'stanza'} and (!(++$stanza % $opt->{'stanza'}));
    }

    # make sure that we clear linked words next time through
    $opt->{'doflush'} = 1;

    # stash counters
    $opt->{'stanzacount'} = $stanza;
    $opt->{'linecount'} = $lines;

    # we're not done yet
    $line =~ s/^\s+//;
    $line =~ s/\s+$//;

    (0, $line);
}

# add dashes in opportune places
sub add_dashes {
    my $line = shift;

    # end of line dashes are quite common
    $line =~ s/\s*$/--/ if (rand() > 0.80);

    # and mid-line dashes are occasional
    if (word_count($line) > 3 and rand() > 0.90) {
	$line = get_first_word($line, 2) . '--' . strip_first_word($line, 2);
    }
    $line;
}

# strip all punctuation
sub strip_punct {
    my $line = shift;
    $line =~ s{\[}{}g;
    $line =~ s{\]}{}g;
    $line =~ s:/::g;
    $line =~ s:\\::g;
    $line =~ s/[-~`!@#$%^&*()_+={}|:;'",.?<>]//g;
    $line;
}

# find the first occurrence of a starting word, return line #
sub find_first {
    my $ref = shift;
    my $word = shift;
    my $count = shift || 1;
    my ($bottom, $top, $current, $line, $first);

    $bottom = 0;
    $top = $ref->{'line_count'} - 1;

    while ($bottom < $top-1) {
	$current = $bottom + int(($top - $bottom)/2);
	$first = first_word(fetch_line($ref, $current), $count);
	if ($first ge $word) {
	    $top = $current - 1;
	} else {
	    $bottom = $current;
	}
    }
    $bottom + 1;
}

# find the last occurrence of a starting word, return line #
sub find_last {
    my $ref = shift;
    my $word = shift;
    my $count = shift || 1;
    my ($bottom, $top, $current, $line, $first);

    $bottom = 0;
    $top = $ref->{'line_count'} - 1;

    while ($bottom < $top-1) {
	$current = $bottom + int(($top - $bottom)/2);
	$first = first_word(fetch_line($ref, $current), $count);
	if ($first gt $word) {
	    $top = $current - 1;
	} else {
	    $bottom = $current;
	}
    }
    $bottom + 1;
}

# find the (normalized) first word(s) of a line
sub first_word {
    my $line = shift;
    my $count = shift || 1;
    my ($i, $temp, $where, $prev);

    return '' unless $line;
    $line =~ s/^\s*//;	# trim any leading whitespace

    # extract first $count words
    for ($i = $prev = 0, $temp = ''; $i < $count; $i++) {
	$where = index($line, ' ', $prev);  # find next space
	last unless ($where > 0);
	$temp .= (($temp eq '') ? '' : ' '). 
	    substr($line, $prev, $where-$prev);  # copy word
	$prev = $where+1;   # mark found space
    }
    normalize($temp);
}

# find the (normalized) last word(s) of a line
sub last_word {
    my $line = shift;
    my $count = shift || 1;

    my $result = first_word(join('', reverse (split('', $line))), $count);
    join('', reverse(split('', $result)));
}

# strip the first word(s) from a line
sub strip_first_word {
    my $line = shift;
    my $count = shift || 1;
    my ($i, $where, $prev);

    $line =~ s/\s*$//;

    for ($i = $prev = 0; $i < $count; $i++) {
	$where = index($line, ' ', $prev);  # find next space
	last unless ($where > 0);
	$prev = $where + 1;
    }
    substr($line, $where + 1);
}

# strip the last word(s) from a line
sub strip_last_word {
    my $line = shift;
    my $count = shift || 1;

    my $result = strip_first_word(join('', reverse (split('', $line))), $count);
    join('', reverse(split('', $result)));
}

# return the (non-normalized) first word(s) from a line
sub get_first_word {
    my $line = shift;
    my $count = shift || 1;
    my ($result);

    $line =~ s/^\s*//;
    $result = strip_first_word($line, $count);
    substr($line, 0, length($line) - length($result));
}

# return the (non-normalized) last word(s) from a line
sub get_last_word {
    my $line = shift;
    my $count = shift || 1;
    my ($result);

    $line =~ s/\s*$//;
    $result = strip_last_word($line, $count);
    substr($line, length($result)-1);
}

# pick a random line beginning with the specified word(s)
sub get_word_line {
    my $ref = shift;
    my $word = normalize(shift);
    my $count = shift || 1;
    my ($first, $last);

    $first = find_first($ref, $word, $count);
    $last = find_last($ref, $word, $count);
    fetch_line($ref, int(rand($last - $first) + $first));   
}

# return the count of words in a line
sub word_count {
    my $line = shift;
    $line =~ s/^\s*//;
    $line =~ s/\s*$//;
    $line =~ s/\s+/ /g;
    ($line =~ s/ //g) + 1;
}

# normalize a file word for matching purposes
sub normalize {
    my $word = shift;

    $word =~ s/[^a-zA-Z0-9 ]//g;
    $word = lc($word);
}

# make an easy-to-pass hash ref containing file info
sub make_handle {
    my $name = shift;
    my $count = shift;
    my $length = shift;

    my $fh = new FileHandle("< $name") or 
	die "$0: cannot open source file [$name]: $!\n";

    {
	'handle' => $fh,
	'name'   => $name, 
	'line_count' => $count,
	'line_length' => $length,
    }
}

# close filehandle stored in a ref
sub close_handle {
    my $ref = shift;
    my $fh = $ref->{'handle'};
    $fh->close();
}

# seek (approximately) to a certain line in the file and return its contents
sub fetch_line {
    my $ref = shift;
    my $line = shift;	# line # to find
    my ($seek, $text, $fh);

    $seek = int($line * $ref->{'line_length'});
    $fh = $ref->{'handle'};
    seek($fh, $seek, 0);
    <$fh>;
    $text = <$fh> || '';
    chomp($text);
    $text;
}

# command line processing
sub process_cmdline
{
    my $prog = $0;                  # what's my name baby?
    $prog =~ s:.*?([^/]+)$:$1:;     # just a little trim job

    # allow CVS to keep track of versions and last updates :-)
    my $version = '(CVS revision #) $Revision: 1.24 $';     
       $version    =~ s/\$//g;
    my $lastupdate = '$Date: 2003/05/25 23:55:43 $';      
       $lastupdate =~ s/\$//g;

    my $usage = <<EOU;
Usage:  $0 [options]

Write me a poem.

    options

    --source <file>        Sorted text file to use as source
    --filelines <num>      Length of source file in lines (use 'wc -l')

    --lines  <num>         Length of poem in lines
    --link   <num>         Number of words to link between lines
    --width  <num>         Line width
    --topic  <phrase>      Topic to use for this poem
    --stanza <num>         Number of lines in a stanza
    --dickinson            Use lots of dashes
    --hd                   1 word lines, no stanzas
    --eecummings           use only lower case
    --olson                Strip all punctuation
    --wcwilliams           In William Carlos Williams style
    --stein                Gertrude Stein mode
    --web                  Wrap in rickbradley.com web post formatting

    -h, -?, --help         Display this message
    -v, --version          Output version info and exit
    -d, --debug            Turn on debugging (default = off)

Rick Bradley <rick at rickbradley.com>

EOU

    # variables to store commandline args
    my ($arg_source, $arg_filelines, $arg_lines, $arg_link, $arg_topic,
	$arg_stanza, $arg_eecummings, $arg_nopunctuation, $arg_dickinson,
	$arg_stein, $arg_wcwilliams, $arg_web, $arg_hd, $arg_help, $arg_olson,
	$arg_width, $arg_version, $arg_debug, $opt);

    # don't ignore case -- in case we want to differentiate between '-x'/'-X'
    Getopt::Long::Configure('no_ignore_case');

    # retrieve the command line options
    GetOptions(
	       'source=s'      => \$arg_source,
	       'filelines=i'   => \$arg_filelines,
	       'lines=i'       => \$arg_lines,
	       'link=i'        => \$arg_link,
	       'stanza=i'      => \$arg_stanza,
	       'topic=s'       => \$arg_topic,
	       'dickinson'     => \$arg_dickinson, 
	       'eecummings'    => \$arg_eecummings,
	       'olson'         => \$arg_olson,
	       'hd'            => \$arg_hd,
	       'wcwilliams'    => \$arg_wcwilliams,
	       'stein'         => \$arg_stein,
	       'width=i'       => \$arg_width,
	       'web'           => \$arg_web,
	       'help|h|?'      => \$arg_help,
	       'version|v'     => \$arg_version,
	       'debug|d'       => \$arg_debug,
    ) &&!$arg_help &&!$arg_version or die $usage;

    die $usage if $arg_version;

    # prepare for the inevitable
    my $dieflag = 0;
    my $dieerror = '';

    # process command-line arguments
    $opt = { };

    $opt->{'source'} = $arg_source || '/art/text/all.sorted';
    if (! -f $opt->{'source'}) {
	$dieflag = 1;	
	$dieerror = "$0: cannot locate source file [".$opt->{'source'}."]\n";
    }

    $opt->{'line_count'} = $arg_filelines || 62810067;
    $opt->{'line_length'} = int(((stat($opt->{'source'}))[7])/$opt->{'line_count'});

    # validate lines
    if (defined $arg_lines and $arg_lines <= 0) {
        $dieflag = 1;
        $dieerror .= "--lines must specify a number > 0\n";
    }

    # validate linkage
    if (defined $arg_link and $arg_link <= 0) {
        $dieflag = 1;
        $dieerror .= "--link must specify a number > 0\n";
    }

    # validate width
    if (defined $arg_width and $arg_width <= 0) {
        $dieflag = 1;
        $dieerror .= "--width must specify a number > 0\n";
    }

    # validate stanza
    if (defined $arg_stanza and $arg_stanza <= 0) {
        $dieflag = 1;
        $dieerror .= "--stanza must specify a number > 0\n";
    }

    # set option values
    $opt->{'debug'} = $arg_debug || 0;
    $opt->{'lines'} = ($arg_lines || 8) - 1;
    $opt->{'link'} = $arg_link || 1;
    $opt->{'width'} = $arg_width || 0;
    $opt->{'stanza'} = $arg_stanza || 0;
    $opt->{'topic'} = $arg_topic || '';
    $opt->{'dashes'} = $arg_dickinson || 0;
    $opt->{'lower'} = $arg_eecummings || 0;
    $opt->{'punct'} = ($arg_olson ? 0 : 1);
    $opt->{'flush'} = $arg_stein ? 0 : 1;
    $opt->{'web'} = $arg_web || 0;

    # set combo-poet options
    #
    if ($arg_wcwilliams) {
	$opt->{'stanza'} = 4;
	$opt->{'punct'} = 0;
    }

    if ($arg_hd) {
	$opt->{'stanza'} = 0;
	$opt->{'width'} = 1;
    }

    # set stanza break string
    $opt->{'break'} = $opt->{'web'} ? "<br />\n" : "\n";

    # seasons don't fear the reaper
    die "\n$dieerror\n$usage" if $dieflag;   

    # return the options hash
    $opt;
}

